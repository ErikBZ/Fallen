//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

// this'll be a dictionary where the key HAS TO BE a string

public class Dict<T> where T:class{
	private Char[] delim = {','};
	private T[,] arrayOfLands;
	private int xMax;
	private int yMax;

	public Dict (){
		arrayOfLands = new T[200, 200];
		xMax = 0;
		yMax = 0;
	}
	public void Add(string key, T gen){
		string[] nums = key.Split(delim);
		int x = Convert.ToInt16(nums[0]);
		int y = Convert.ToInt16(nums[1]);

		if(x > xMax){
			xMax = x;
		}
		if(y > yMax){
			yMax = y;
		}
//		Debug.Log(xMax);
//		Debug.Log(yMax);

		arrayOfLands[x,y] = gen;
	}

	public override string ToString(){
		string output = "";

		for(int i = 0; i<xMax; i++){
			for(int j=0; j<yMax; j++){
				output += arrayOfLands[i,j].ToString() + " ";
			}
			output += "\n";
		}
		return output;
	}
	public T get(Vector2 vect){
		int x = (int)vect.x;
		int y = (int)vect.y;
		return get (x,y);
	}
	public T get(string key){
		string[] nums = key.Split(delim);
		int x = Convert.ToInt16(nums[0]);
		int y = Convert.ToInt16(nums[1]);

		return get(x, y);
	}
	public T get(int x, int y){
		if(x>xMax || y > yMax || x<0 || y<0){
			return null;
		}
		return arrayOfLands[x,y];
	}

	// i dont think i need this
//	private void setUpArray(){
//		for(int i = 0; i< arrayOfLands.Length; i++){
//			for(int j = 0; j<arrayOfLands.Length; j++){
//				arrayOfLands[i,j] = null;
//			}
//		}
//	}
}

